import logging
import asyncio
import aiosqlite
from datetime import datetime, timedelta
from aiogram import Bot, Dispatcher, types, F, Router
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from aiogram.utils.markdown import hcode
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

# --------------------------
# --- ‚öôÔ∏è –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –ë–û–¢–ê (–í–ê–®–ò –î–ê–ù–ù–´–ï) ---
# --------------------------

# 1. –í–∞—à —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –æ—Ç @BotFather
BOT_TOKEN = "7613767726:AAFwZ5tA4B1tr14eCYunucJZzRJtl61YyBM"

# 2. ID —á–∞—Ç–∞, –∫—É–¥–∞ –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏—è (–®—Ç–∞–±). 
ADMIN_CHAT_ID_RAW = 3043189571 

# 3. –°–ø–∏—Å–æ–∫ ID –∞–¥–º–∏–Ω–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –∏–º–µ—é—Ç –ø—Ä–∞–≤–æ –æ—Ç–≤–µ—á–∞—Ç—å.
ADMIN_IDS = [
    812708612, # –í–∞—à ID
    # –°–Æ–î–ê –î–û–ë–ê–í–¨–¢–ï ID –í–¢–û–†–û–ì–û –ê–î–ú–ò–ù–ê
]
DB_NAME = 'bot_db.sqlite'

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –º—É—Ç–∞/–±–∞–Ω–∞
MUTE_OPTIONS = {
    "1 —á–∞—Å ü§´": 1,
    "3 —á–∞—Å–∞ üîá": 3,
    "12 —á–∞—Å–æ–≤ üòê": 12,
}
BAN_OPTIONS = {
    "1 –¥–µ–Ω—å ‚ùå": 24,
    "7 –¥–Ω–µ–π üö´": 168,
    "–ù–∞–≤—Å–µ–≥–¥–∞ üíÄ": 99999,
}
PERMANENT_BAN_MARKER = '9999-12-31 23:59:59'
# --------------------------

# --- FSM (–ö–û–ù–ï–ß–ù–´–ï –ê–í–¢–û–ú–ê–¢–´ –°–û–°–¢–û–Ø–ù–ò–ô) ---
class AdminState(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤ —á–∞—Ç–µ –®—Ç–∞–±–∞."""
    waiting_for_unblock_id = State()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
router = Router()
bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()
dp.include_router(router)
ADMIN_CHAT_ID = [int(f'-100{ADMIN_CHAT_ID_RAW}'), -ADMIN_CHAT_ID_RAW]

# --- ü™µ –ù–ê–°–¢–†–û–ô–ö–ê –õ–û–ì–ò–†–û–í–ê–ù–ò–Ø ---
class AdminLogHandler(logging.Handler):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ª–æ–≥–∏ (—Ç–æ–ª—å–∫–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏ –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å—Ç–∞—Ä—Ç–µ) –≤ —á–∞—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."""
    def __init__(self, bot: Bot, raw_chat_id: int):
        super().__init__()
        self.bot = bot
        self.chat_id = int(f'-100{raw_chat_id}')
        self.setLevel(logging.WARNING) 
        self.formatter = logging.Formatter(
            '%(asctime)s - %(levelname)s - %(message)s', 
            datefmt='%Y-%m-%d %H:%M:%S'
        )
        self.is_ready = False 

    def emit(self, record):
        if not self.is_ready: return
        
        log_entry = self.format(record)
        is_startup_log = '–ë–æ—Ç –°–≤—è–∑–∏ –∑–∞–ø—É—â–µ–Ω' in log_entry or '–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î –∑–∞–∫—Ä—ã—Ç–æ' in log_entry
        is_critical_log = record.levelno >= logging.CRITICAL or 'Unauthorized' in log_entry
        
        if not (is_startup_log or is_critical_log): return
             
        asyncio.run_coroutine_threadsafe(
            self.send_log(log_entry), asyncio.get_event_loop()
        )

    async def send_log(self, text):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –ª–æ–≥–∞ –≤ —á–∞—Ç –∞–¥–º–∏–Ω–∞."""
        try:
            await self.bot.send_message(
                chat_id=self.chat_id,
                text=hcode(f"üö® –õ–û–ì {text}"),
                parse_mode=ParseMode.HTML
            )
        except Exception:
            # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –∫–æ–Ω—Å–æ–ª—å, –µ—Å–ª–∏ —á–∞—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
            logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ª–æ–≥ –≤ —á–∞—Ç –∞–¥–º–∏–Ω–∞.")

admin_log_handler = AdminLogHandler(bot, ADMIN_CHAT_ID_RAW)
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logging.getLogger().addHandler(admin_log_handler)


# –°–ª–æ–≤–∞—Ä–∏ –∏ DB
message_map = {}
db_conn: aiosqlite.Connection = None 

# -------------------------------------------------------------
# --- üíæ –§–£–ù–ö–¶–ò–ò –ë–ê–ó–´ –î–ê–ù–ù–´–• (–ë–õ–û–ö–ò–†–û–í–ö–ê) ---
# -------------------------------------------------------------

async def init_db():
    global db_conn
    db_conn = await aiosqlite.connect(DB_NAME)
    await db_conn.execute(
        """
        CREATE TABLE IF NOT EXISTS blocked_users (
            user_id INTEGER PRIMARY KEY,
            block_until TEXT,
            reason TEXT
        );
        """
    )
    await db_conn.commit()
    logging.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞.")

async def is_user_blocked(user_id: int):
    now = datetime.now()
    async with db_conn.execute("SELECT block_until, reason FROM blocked_users WHERE user_id = ?", (user_id,)) as cursor:
        row = await cursor.fetchone()
        if not row: 
            return False, None, None
        
        block_until_str, reason = row
        
        if block_until_str == PERMANENT_BAN_MARKER:
             return True, "–ù–∞–≤—Å–µ–≥–¥–∞", reason

        block_until = datetime.strptime(block_until_str, '%Y-%m-%d %H:%M:%S')

        if block_until > now: 
            return True, block_until.strftime('%d.%m.%Y %H:%M'), reason
        
        # –£–¥–∞–ª—è–µ–º –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—É—é –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
        await db_conn.execute("DELETE FROM blocked_users WHERE user_id = ?", (user_id,))
        await db_conn.commit()
        return False, None, None

async def block_user(user_id: int, duration_hours: int, reason: str):
    if duration_hours == 99999:
        block_until_str = PERMANENT_BAN_MARKER
        block_until_display = "–ù–∞–≤—Å–µ–≥–¥–∞"
    else:
        block_until = datetime.now() + timedelta(hours=duration_hours)
        block_until_str = block_until.strftime('%Y-%m-%d %H:%M:%S')
        block_until_display = block_until.strftime('%d.%m.%Y %H:%M')
    
    await db_conn.execute(
        "REPLACE INTO blocked_users (user_id, block_until, reason) VALUES (?, ?, ?)",
        (user_id, block_until_str, reason)
    )
    await db_conn.commit()
    return block_until_display

async def unblock_user(user_id: int):
    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∏—á–∏–Ω—É –¥–æ —É–¥–∞–ª–µ–Ω–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    async with db_conn.execute("SELECT reason FROM blocked_users WHERE user_id = ?", (user_id,)) as cursor:
        row = await cursor.fetchone()
        reason = row[0] if row else "N/A"

    await db_conn.execute("DELETE FROM blocked_users WHERE user_id = ?", (user_id,))
    
    async with db_conn.execute("SELECT changes() FROM blocked_users") as cursor:
         rows_changed = (await cursor.fetchone())[0]

    await db_conn.commit()
    return rows_changed > 0, reason

# -------------------------------------------------------------
# --- ‚å®Ô∏è –ò–ù–õ–ê–ô–ù-–ö–õ–ê–í–ò–ê–¢–£–†–ê ---
# -------------------------------------------------------------

def get_admin_actions_keyboard(user_id: int) -> InlineKeyboardBuilder:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º."""
    builder = InlineKeyboardBuilder()
    
    builder.button(text="üîá –ú–£–¢", callback_data=f"select_mute:{user_id}")
    builder.button(text="‚õîÔ∏è –ë–ê–ù", callback_data=f"select_ban:{user_id}")
    builder.button(text="üîì –†–∞–∑–º—É—Ç", callback_data=f"unblock:{user_id}")
    
    builder.button(text="üí¨ –û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f"reply_info:{user_id}")
    builder.button(text="üìã –ò–Ω—Ñ–æ/–ò—Å—Ç–æ—Ä–∏—è", callback_data=f"user_detailed_info:{user_id}")
    
    builder.button(text="‚û°Ô∏è –ü–µ—Ä–µ—Å–ª–∞—Ç—å", callback_data=f"forward_to_admin:{user_id}") 
    builder.button(text="üîç –ü–æ–∏—Å–∫ ID", callback_data=f"search_id:{user_id}")
    
    builder.adjust(3, 2, 2)
    return builder

def get_time_selection_keyboard(user_id: int, options: dict, prefix: str) -> InlineKeyboardBuilder:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –º—É—Ç–∞/–±–∞–Ω–∞."""
    builder = InlineKeyboardBuilder()
    for text, duration in options.items():
        builder.button(text=text, callback_data=f"{prefix}:{user_id}:{duration}")
    
    builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"back_to_main:{user_id}")
    
    builder.adjust(3, repeat=True)
    return builder

# -------------------------------------------------------------
# --- üëë –ê–î–ú–ò–ù-–õ–û–ì–ò–ö–ê –í –®–¢–ê–ë–ï (–ß–ï–†–ï–ó FSM –∏ –†–û–£–¢–ï–†) ---
# -------------------------------------------------------------

# --- 1. –ö–û–ú–ê–ù–î–ê /START –í –®–¢–ê–ë–ï (–ö–Ω–æ–ø–∫–∞ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏) ---
@router.message(F.text == "/start", F.chat.id.in_(ADMIN_CHAT_ID))
async def command_start_admin(message: types.Message):
    if message.from_user.id not in ADMIN_IDS:
        return 
    
    builder = InlineKeyboardBuilder()
    builder.button(text="üîì –°–Ω—è—Ç—å –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –ø–æ ID", callback_data="manual_unblock_start")
    
    await message.answer(
        "üëã **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –®—Ç–∞–± –ø–æ–¥–¥–µ—Ä–∂–∫–∏!**\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ, —á—Ç–æ–±—ã —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, "
        "–∏–ª–∏ –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞, —á—Ç–æ–±—ã –∞–Ω–æ–Ω–∏–º–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç.",
        reply_markup=builder.as_markup(),
        parse_mode=ParseMode.MARKDOWN
    )

# --- 2. –ù–ê–ß–ê–õ–û –ü–†–û–¶–ï–°–°–ê –†–ê–ó–ë–õ–û–ö–ò–†–û–í–ö–ò –ü–û ID ---
@router.callback_query(F.data == "manual_unblock_start")
async def start_manual_unblock(callback: types.CallbackQuery, state: FSMContext):
    if callback.from_user.id not in ADMIN_IDS:
        return await callback.answer("üö´ –ù–µ—Ç –ø—Ä–∞–≤.", show_alert=True)
    
    await state.set_state(AdminState.waiting_for_unblock_id)
    await callback.message.answer(
        "üîì **–†–µ–∂–∏–º —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ ID**\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ **—á–∏—Å–ª–æ–≤–æ–π ID** –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å.\n\n"
        "–ù–∞–ø–∏—à–∏—Ç–µ `/cancel`, —á—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å.",
        # –£–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É (–µ—Å–ª–∏ –±—ã–ª–∞)
        reply_markup=types.ReplyKeyboardRemove()
    )
    await callback.answer()

# --- 3. –û–ë–†–ê–ë–û–¢–ö–ê –í–í–û–î–ê /cancel ---
@router.message(AdminState.waiting_for_unblock_id, F.text.lower() == '/cancel')
async def cancel_unblock(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer("‚úÖ –û—Ç–º–µ–Ω–µ–Ω–æ. –í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –æ–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º.", reply_markup=types.ReplyKeyboardRemove())

# --- 4. –û–ë–†–ê–ë–û–¢–ö–ê –í–í–û–î–ê ID –î–õ–Ø –†–ê–ó–ë–õ–û–ö–ò–†–û–í–ö–ò ---
@router.message(AdminState.waiting_for_unblock_id)
async def process_manual_unblock_id(message: types.Message, state: FSMContext):
    await state.clear() 

    try:
        user_id = int(message.text.strip())
    except ValueError:
        return await message.answer("‚ùå –û—à–∏–±–∫–∞! ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ `/cancel`.", reply_markup=types.ReplyKeyboardRemove())

    is_unblocked, reason = await unblock_user(user_id)

    if is_unblocked:
        await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {hcode(user_id)} **—Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω** (—Ä–∞–Ω–µ–µ –±—ã–ª –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ø–æ –ø—Ä–∏—á–∏–Ω–µ: *{reason}*).", parse_mode=ParseMode.HTML, reply_markup=types.ReplyKeyboardRemove())
        try:
            await bot.send_message(chat_id=user_id, text="ü•≥ **–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞!**\n\n–¢–µ–ø–µ—Ä—å –≤—ã —Å–Ω–æ–≤–∞ –º–æ–∂–µ—Ç–µ –ø–∏—Å–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
        except Exception:
            logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –æ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–µ.")
    else:
        await message.answer(f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {hcode(user_id)} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫.", parse_mode=ParseMode.HTML, reply_markup=types.ReplyKeyboardRemove())


# --- 5. –û–ë–†–ê–ë–û–¢–ß–ò–ö –ê–ù–û–ù–ò–ú–ù–´–• –û–¢–í–ï–¢–û–í ---
@router.message(
    F.chat.id.in_(ADMIN_CHAT_ID), 
    F.reply_to_message, 
    lambda m: m.reply_to_message.message_id in message_map
)
async def handle_admin_reply(message: types.Message):
    """–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞–Ω–æ–Ω–∏–º–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."""
    if message.from_user.id not in ADMIN_IDS: return
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await reply_to_user(message)


# --- 6. –ö–û–ú–ê–ù–î–´ BLOCK/UNBLOCK (–î–ª—è –ø—Ä—è–º–æ–≥–æ –≤–≤–æ–¥–∞) ---

@router.message(F.chat.id.in_(ADMIN_CHAT_ID), F.text.startswith('/block'))
async def command_block_user(message: types.Message):
    """–õ–æ–≥–∏–∫–∞ –∫–æ–º–∞–Ω–¥—ã –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ —á–µ—Ä–µ–∑ /block [ID] [—á–∞—Å—ã] [–ü—Ä–∏—á–∏–Ω–∞]."""
    try:
        parts = message.text.split(maxsplit=3)
        if len(parts) < 3:
            return await message.reply("‚õîÔ∏è **–û—à–∏–±–∫–∞!** –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `/block [ID] [—á–∞—Å—ã] [–ü—Ä–∏—á–∏–Ω–∞]`", parse_mode=ParseMode.MARKDOWN)

        user_id = int(parts[1])
        duration = int(parts[2])
        reason = parts[3] if len(parts) > 3 else "–ù–µ —É–∫–∞–∑–∞–Ω–∞ (—á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É)"

        block_until_str = await block_user(user_id, duration, reason)
        
        await message.reply(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {hcode(user_id)} **–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω** –¥–æ {block_until_str}.\n–ü—Ä–∏—á–∏–Ω–∞: {reason}", parse_mode=ParseMode.HTML)
        
        try:
            await bot.send_message(
                chat_id=user_id,
                text=f"üõë **–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ!**\n\n–í–∞—à–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–∏—Å–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∞.\n"
                     f"**–ü—Ä–∏—á–∏–Ω–∞:** {reason}\n**–î–æ:** {block_until_str}",
                parse_mode=ParseMode.MARKDOWN
            )
        except:
            logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –æ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ.")

    except ValueError:
        await message.reply("‚õîÔ∏è **–û—à–∏–±–∫–∞!** –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç ID (—á–∏—Å–ª–æ) –∏ —á–∞—Å–æ–≤ (—á–∏—Å–ª–æ).", parse_mode=ParseMode.MARKDOWN)

@router.message(F.chat.id.in_(ADMIN_CHAT_ID), F.text.startswith('/unblock'))
async def command_unblock_user(message: types.Message):
    """–õ–æ–≥–∏–∫–∞ –∫–æ–º–∞–Ω–¥—ã —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ —á–µ—Ä–µ–∑ /unblock [ID]."""
    try:
        parts = message.text.split(maxsplit=1)
        if len(parts) < 2:
            return await message.reply("‚õîÔ∏è **–û—à–∏–±–∫–∞!** –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `/unblock [ID]`", parse_mode=ParseMode.MARKDOWN)

        user_id = int(parts[1])
        is_unblocked, reason = await unblock_user(user_id)
        
        if is_unblocked:
            await message.reply(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {hcode(user_id)} **—Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω** (–ü—Ä–∏—á–∏–Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏: *{reason}*).", parse_mode=ParseMode.HTML)
            try:
                await bot.send_message(chat_id=user_id, text="ü•≥ **–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞!**\n\n–¢–µ–ø–µ—Ä—å –≤—ã —Å–Ω–æ–≤–∞ –º–æ–∂–µ—Ç–µ –ø–∏—Å–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
            except:
                pass
        else:
            await message.reply(f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {hcode(user_id)} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫.", parse_mode=ParseMode.HTML)
            
    except ValueError:
        await message.reply("‚õîÔ∏è **–û—à–∏–±–∫–∞!** –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç ID (—á–∏—Å–ª–æ).", parse_mode=ParseMode.MARKDOWN)

# --- 7. –ü–£–°–¢–´–ï –°–û–û–ë–©–ï–ù–ò–Ø –ê–î–ú–ò–ù–û–í (–ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º) ---
@router.message(F.chat.id.in_(ADMIN_CHAT_ID))
async def ignore_other_admin_messages(message: types.Message):
    """–ò–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç–µ –®—Ç–∞–±–∞, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ —è–≤–ª—è—é—Ç—Å—è –∫–æ–º–∞–Ω–¥–∞–º–∏, –æ—Ç–≤–µ—Ç–∞–º–∏ –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ FSM."""
    if message.from_user.id not in ADMIN_IDS: return
    pass 

# -------------------------------------------------------------
# --- –§–£–ù–ö–¶–ò–ò –ò CALLBACKS –í–ù–ï –®–¢–ê–ë–ê ---
# -------------------------------------------------------------

# --- –§–£–ù–ö–¶–ò–Ø –ê–ù–û–ù–ò–ú–ù–û–ì–û –û–¢–í–ï–¢–ê ---
async def reply_to_user(message: types.Message):
    """–ü–æ–∑–≤–æ–ª—è–µ—Ç –∞–¥–º–∏–Ω—É –æ—Ç–≤–µ—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∞–Ω–æ–Ω–∏–º–Ω–æ."""
    if not message.text:
          return await message.reply("‚òùÔ∏è –î–ª—è –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¢–ï–ö–°–¢–û–í–û–ï —Å–æ–æ–±—â–µ–Ω–∏–µ.")

    original_message_id = message.reply_to_message.message_id
    user_id_to_reply = message_map.get(original_message_id)

    if user_id_to_reply:
        try:
            await bot.send_message(
                chat_id=user_id_to_reply,
                text=f"**üì¢ –û—Ç–≤–µ—Ç –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏:**\n\n{message.text}",
                parse_mode=ParseMode.MARKDOWN
            )
            await message.reply(f"‚úÖ –ê–Ω–æ–Ω–∏–º–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {hcode(user_id_to_reply)}.", parse_mode=ParseMode.HTML)
            
        except Exception as e:
            logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id_to_reply}. –ü—Ä–∏—á–∏–Ω–∞: {e}")
            await message.reply("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏! –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –≤–æ–∑–º–æ–∂–Ω–æ, –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞.")
    else:
        logging.warning(f"–ù–µ –Ω–∞–π–¥–µ–Ω user_id –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è-–æ—Ç–≤–µ—Ç–∞ ID: {original_message_id}")
        await message.reply("‚ö†Ô∏è –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª—É—á–∞—Ç–µ–ª—è. –°–≤—è–∑—å —Å —ç—Ç–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –ø–æ—Ç–µ—Ä—è–Ω–∞.")

# --- –ì–õ–ê–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –ü–ï–†–ï–°–´–õ–ö–ò (–ö–õ–ò–ï–ù–¢ -> –ê–î–ú–ò–ù–£) ---
@router.message(F.chat.id.not_in(ADMIN_CHAT_ID))
async def forward_to_admin(message: types.Message):
    """–ü—Ä–∏–Ω–∏–º–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞, –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –∏ –ø–µ—Ä–µ—Å—ã–ª–∞–µ—Ç –∞–¥–º–∏–Ω–∞–º —Å –∫–Ω–æ–ø–∫–∞–º–∏."""
    user = message.from_user
    
    if user.id in ADMIN_IDS: 
        return await message.answer("üëã –ü—Ä–∏–≤–µ—Ç, –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä! –í–∞—à–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –ø–µ—Ä–µ—Å—ã–ª–∞—é—Ç—Å—è –≤ –®—Ç–∞–±.")
    
    is_blocked, unblock_time, reason = await is_user_blocked(user.id)
    if is_blocked:
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø—Ä–∏—á–∏–Ω–æ–π
        return await message.answer(
            f"üõë **–í–Ω–∏–º–∞–Ω–∏–µ!** –í–∞—à–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–∏—Å–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∞.\n"
            f"–í—ã —Å–º–æ–∂–µ—Ç–µ —Å–Ω–æ–≤–∞ –ø–∏—Å–∞—Ç—å –ø–æ—Å–ª–µ **{unblock_time}**.\n**–ü—Ä–∏—á–∏–Ω–∞:** {reason}",
            parse_mode=ParseMode.MARKDOWN
        )
        
    user_info = (
        f"**üö® –ù–û–í–û–ï –û–ë–†–ê–©–ï–ù–ò–ï!**\n"
        f"**üÜî ID:** `{user.id}`\n"
        f"**üë§ –ù–∏–∫:** @{user.username or '–ù–µ—Ç'}\n"
        f"**üßë‚Äçüíª –ò–º—è:** {user.full_name}\n"
        f"**üåé –Ø–∑—ã–∫:** {user.language_code or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
        f"**‚úÖ Premium:** {'–î–∞' if user.is_premium else '–ù–µ—Ç'}\n"
        f"----------------------------------------\n"
    )
    
    chat_ids_to_try = [int(f'-100{ADMIN_CHAT_ID_RAW}'), -ADMIN_CHAT_ID_RAW]

    last_error = None
    sent_successfully = False
    
    keyboard = get_admin_actions_keyboard(user.id)
    
    for chat_id_to_try in chat_ids_to_try:
        try:
            admin_message_text = await bot.send_message(
                chat_id=chat_id_to_try,
                text=user_info + (message.text or "*--- –°–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ —Ç–µ–∫—Å—Ç–∞ (—Ç–æ–ª—å–∫–æ –º–µ–¥–∏–∞) ---*"),
                parse_mode=ParseMode.MARKDOWN,
                reply_markup=keyboard.as_markup()
            )
            
            if message.content_type != types.ContentType.TEXT:
                await message.copy_to(
                    chat_id=chat_id_to_try,
                    caption=message.caption or "",
                    reply_to_message_id=admin_message_text.message_id
                )

            message_map[admin_message_text.message_id] = user.id
            sent_successfully = True
            break
            
        except Exception as e:
            last_error = e

    if sent_successfully:
        await message.answer("‚úÖ –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ. –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –æ—Ç–≤–µ—Ç–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏.")
    else:
        logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç {ADMIN_CHAT_ID_RAW} (–æ–±–µ –ø–æ–ø—ã—Ç–∫–∏). –ü–æ—Å–ª–µ–¥–Ω—è—è –æ—à–∏–±–∫–∞: {last_error}")
        await message.answer("‚ùå –ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞. –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–µ –ø–æ–ª—É—á–∏–ª –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")

# --- CALLBACKS (–û–ë–†–ê–ë–û–¢–ö–ê –ù–ê–ñ–ê–¢–ò–Ø –ö–ù–û–ü–û–ö) ---

@router.callback_query(lambda c: c.data.startswith('search_id:'))
async def process_search_id_callback(callback: types.CallbackQuery):
    if callback.from_user.id not in ADMIN_IDS: return await callback.answer("üö´ –ù–µ—Ç –ø—Ä–∞–≤.", show_alert=True)
    _, user_id_str = callback.data.split(':')
    user_id = int(user_id_str)
    search_url = f"https://www.google.com/search?q=telegram+id+{user_id}"
    builder = InlineKeyboardBuilder()
    builder.button(text="üîç –ò—Å–∫–∞—Ç—å –≤ Google", url=search_url)
    await callback.message.answer(
        f"**üîç –ü–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ ID:**\n\nID: `{user_id}`",
        reply_markup=builder.as_markup(),
        parse_mode=ParseMode.MARKDOWN
    )
    await callback.answer(f"ID: {user_id} ‚Äî –≥–æ—Ç–æ–≤ –¥–ª—è –ø–æ–∏—Å–∫–∞.", show_alert=False)

@router.callback_query(lambda c: c.data.startswith('user_detailed_info:'))
async def process_detailed_info_callback(callback: types.CallbackQuery):
    if callback.from_user.id not in ADMIN_IDS: return await callback.answer("üö´ –ù–µ—Ç –ø—Ä–∞–≤.", show_alert=True)
    _, user_id_str = callback.data.split(':')
    user_id = int(user_id_str)
    
    is_blocked, unblock_time, reason = await is_user_blocked(user_id)
    
    block_status = "‚úÖ –ß–∏—Å—Ç"
    if is_blocked:
        block_status = f"üö´ **–ó–ê–ë–õ–û–ö–ò–†–û–í–ê–ù** –¥–æ {unblock_time}.\n –ü—Ä–∏—á–∏–Ω–∞: {reason}"
    
    info_text = (
        f"**üìã –î–ï–¢–ê–õ–¨–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø**\n"
        f"**üÜî ID:** `{user_id}`\n"
        f"----------------------------------\n"
        f"**–°—Ç–∞—Ç—É—Å –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏:** {block_status}\n"
        f"**–ò—Å—Ç–æ—Ä–∏—è:** (–¢—Ä–µ–±—É–µ—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö)\n"
    )
    
    await callback.answer(f"–ó–∞–≥—Ä—É–∑–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ {user_id}...", show_alert=False)
    await callback.message.answer(info_text, parse_mode=ParseMode.MARKDOWN)

@router.callback_query(lambda c: c.data.startswith('forward_to_admin:'))
async def process_forward_callback(callback: types.CallbackQuery):
    if callback.from_user.id not in ADMIN_IDS: return await callback.answer("üö´ –ù–µ—Ç –ø—Ä–∞–≤.", show_alert=True)
    await callback.answer("‚ö†Ô∏è –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è —Ç—Ä–µ–±—É–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ (FSM) –¥–ª—è —É–∫–∞–∑–∞–Ω–∏—è –ø–æ–ª—É—á–∞—Ç–µ–ª—è.", show_alert=True)


@router.callback_query(lambda c: c.data.startswith('select_mute:'))
async def select_mute_time(callback: types.CallbackQuery):
    if callback.from_user.id not in ADMIN_IDS: return await callback.answer("üö´ –ù–µ—Ç –ø—Ä–∞–≤.", show_alert=True)
    user_id = int(callback.data.split(':')[1])
    keyboard = get_time_selection_keyboard(user_id, MUTE_OPTIONS, "mute")
    await callback.message.edit_reply_markup(reply_markup=keyboard.as_markup())
    await callback.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –º—É—Ç–∞.")

@router.callback_query(lambda c: c.data.startswith('select_ban:'))
async def select_ban_time(callback: types.CallbackQuery):
    if callback.from_user.id not in ADMIN_IDS: return await callback.answer("üö´ –ù–µ—Ç –ø—Ä–∞–≤.", show_alert=True)
    user_id = int(callback.data.split(':')[1])
    keyboard = get_time_selection_keyboard(user_id, BAN_OPTIONS, "ban")
    await callback.message.edit_reply_markup(reply_markup=keyboard.as_markup())
    await callback.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –±–∞–Ω–∞.")

@router.callback_query(lambda c: c.data.startswith('back_to_main:'))
async def back_to_main_keyboard(callback: types.CallbackQuery):
    if callback.from_user.id not in ADMIN_IDS: return await callback.answer("üö´ –ù–µ—Ç –ø—Ä–∞–≤.", show_alert=True)
    user_id = int(callback.data.split(':')[1])
    keyboard = get_admin_actions_keyboard(user_id)
    await callback.message.edit_reply_markup(reply_markup=keyboard.as_markup())
    await callback.answer("–í–µ—Ä–Ω—É–ª–∏—Å—å –∫ –æ—Å–Ω–æ–≤–Ω—ã–º –¥–µ–π—Å—Ç–≤–∏—è–º.")

@router.callback_query(lambda c: c.data.startswith(('mute:', 'ban:')))
async def process_block_callback(callback: types.CallbackQuery):
    if callback.from_user.id not in ADMIN_IDS: return await callback.answer("üö´ –ù–µ—Ç –ø—Ä–∞–≤.", show_alert=True)
    
    prefix, user_id_str, duration_str = callback.data.split(':')
    user_id = int(user_id_str)
    duration = int(duration_str)
    
    action_type = "–ú—É—Ç" if prefix == "mute" else "–ë–∞–Ω"
    reason = f"–ê–¥–º–∏–Ω {callback.from_user.full_name} –ø—Ä–∏–º–µ–Ω–∏–ª {action_type} —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏."
    
    block_until_display = await block_user(user_id, duration, reason)
    
    await callback.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω ({action_type}) –¥–æ {block_until_display}", show_alert=True)
    
    keyboard = get_admin_actions_keyboard(user_id)
    await callback.message.edit_reply_markup(reply_markup=keyboard.as_markup())
    
    await bot.send_message(
        chat_id=callback.message.chat.id,
        text=f"‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {callback.from_user.full_name} –ø—Ä–∏–º–µ–Ω–∏–ª **{action_type}** –¥–ª—è {hcode(user_id)} –Ω–∞ **{block_until_display}**.",
        parse_mode=ParseMode.HTML
    )
    try:
          await bot.send_message(
              chat_id=user_id,
              text=f"üõë **–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ!**\n\n–í–∞—à–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–∏—Å–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∞.\n"
                   f"**–¢–∏–ø:** {action_type}\n**–ü—Ä–∏—á–∏–Ω–∞:** –ù–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª.\n**–î–æ:** {block_until_display}",
              parse_mode=ParseMode.MARKDOWN
          )
    except:
        pass

@router.callback_query(lambda c: c.data.startswith('unblock:'))
async def process_unblock_callback(callback: types.CallbackQuery):
    if callback.from_user.id not in ADMIN_IDS: return await callback.answer("üö´ –ù–µ—Ç –ø—Ä–∞–≤.", show_alert=True)

    _, user_id_str = callback.data.split(':')
    user_id = int(user_id_str)
    
    is_unblocked, reason = await unblock_user(user_id)
    
    if is_unblocked: 
        await callback.answer(f"ü•≥ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.", show_alert=True)
        await bot.send_message(
            chat_id=callback.message.chat.id,
            text=f"‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {callback.from_user.full_name} **—Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª** {hcode(user_id)} (–ü—Ä–∏—á–∏–Ω–∞: *{reason}*).",
            parse_mode=ParseMode.HTML
        )
        try:
            await bot.send_message(chat_id=user_id, text="ü•≥ **–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞!**\n\n–¢–µ–ø–µ—Ä—å –≤—ã —Å–Ω–æ–≤–∞ –º–æ–∂–µ—Ç–µ –ø–∏—Å–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
        except:
            pass
    else:
        await callback.answer(f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –±—ã–ª –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫.", show_alert=True)
    
    keyboard = get_admin_actions_keyboard(user_id)
    await callback.message.edit_reply_markup(reply_markup=keyboard.as_markup())

@router.callback_query(lambda c: c.data.startswith('reply_info:'))
async def process_reply_info_callback(callback: types.CallbackQuery):
    if callback.from_user.id not in ADMIN_IDS: return await callback.answer("üö´ –ù–µ—Ç –ø—Ä–∞–≤.", show_alert=True)
    await callback.answer("–ù–∞–∂–º–∏—Ç–µ '–û—Ç–≤–µ—Ç–∏—Ç—å' (Reply) –Ω–∞ –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∞–Ω–æ–Ω–∏–º–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞.", show_alert=True)


# -------------------------------------------------------------
# --- –ó–ê–ü–£–°–ö –ë–û–¢–ê ---
# -------------------------------------------------------------
async def main() -> None:
    # –†–∞–∑—Ä–µ—à–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –ª–æ–≥–æ–≤ –î–û –ø–æ–ø—ã—Ç–∫–∏ –∑–∞–ø—É—Å–∫–∞!
    admin_log_handler.is_ready = True 
    
    try:
        await init_db() 
        logging.info("üöÄ –ë–æ—Ç –°–≤—è–∑–∏ –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
        await dp.start_polling(bot)
    except Exception as e:
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–∏ –ø—Ä–∏ —Å–±–æ–µ
        logging.critical(f"üõë –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ: {e}")
    finally:
        if db_conn:
            await db_conn.close() 
            logging.info("üõë –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î –∑–∞–∫—Ä—ã—Ç–æ.")

if __name__ == "__main__":
    asyncio.run(main())